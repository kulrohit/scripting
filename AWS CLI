To list of instances 
$/usr/local/bin/list_instances -r ${region} --headers PrivateIP,T:Name

To describe describe instance 
$export EC2_HOME=/usr/local/ec2/ec2-api-tools-1.7.5.1
$export PATH=$PATH:$EC2_HOME/bin 
$export JAVA_HOME=$(/usr/libexec/java_home)
$ec2-describe-instances --region <region> -O <AccessKEY>  -W <Secret key> 

Deleting instance using shell script 
#!/bin/bash
export AWS_CONFIG_FILE='AWS_CONFIG'  # keep your access key, secret key , region info here
instance_id=$3  #Argument 1, which instance need to be deleted 
#check if any other volume is attached to instance
vol=$(aws --profile $1  ec2 describe-volumes --region $2 --filters Name=attachment.instance-id,Values=${instance_id} | jq .Volumes[1].Attachments[0].VolumeId | sed 's/"//g')
# check volume status,size or other info 
echo $vol
#detach volume from instance 
aws --profile $1 ec2 detach-volume --region $2 --volume-id ${vol}  
#delete dettached volume 
aws --profile $1 ec2 delete-volume --region $2 --volume-id ${vol}
#Change termination behavior of instance to terminate , If instance is protected from accidental termination, it wont delete untill behaviour is chaged 
aws --profile $1 --region $1 ec2 modify-instance-attribute --instance-id ${instance_id} --disable-api-termination  "{\"Value\": false}"
#Delet instance 
aws --profile $1 --region $2 ec2 terminate-instances --instance-ids ${instance_id}
# AWS Cloudwatch CLI 
aws cloudwatch get-metric-statistics --namespace AWS/RDS  --metric-name ${metric} --start-time ${STARTTIME} --end-time ${ENDTIME} --period 600  --statistics Average --region us-east-1 --output text | tail -1 | awk '{printf("%d\n",$2 + 0.5)}')
--namespace e.g AWS/RDS,AWS/Redshift,AWS/EC2 etc 
--metrics-name get list from aws cloudwatch , specific names for specific services 
--start-time --endtime are required, 
--region is mandatory 
STARTTIME=`date -d "-15 minutes" "+%Y-%m-%dT%H:%M:%SZ"`
ENDTIME=`date -d "-5 minutes" "+%Y-%m-%dT%H:%M:%SZ"`



##Run chef receipe from remote 
You could use knife ssh to run chef-client on all boxes that contain a certain role or recipe:

knife ssh "role:web" "sudo chef-client" -x ubuntu --sudo 

Or if you're in EC2:

knife ssh "role:web" "sudo chef-client" -x ubuntu -a ec2.public_hostname 


knife ssh name:mynode -a ipaddress  -x ubuntu -i mycredentials.pem "sudo chef-client"You could use knife ssh to run chef-client on all boxes that contain a certain role or recipe:

##Bootstrap Remote node

knife bootstrap new-host-ip -x root -P password -N node_name


#To add a role or recipe to a node
knife node run_list add node_name "recipe[cookbook::recipe]"
knife node run_list add node_name "role[role_name]"
knife node run_list add node_name "role[role_name],recipe[cookbook::recipe]"

##Given a hostname pattern of 'host-<company>-<hostclass>-<index>' (i.e. host-apple-puppet-0) write a custom fact that extracts the <company> value and assigns it to the variable 'company' in facter.

ANS 
======
Facter.add("comapny") do
   setcode do
        Facter::Util::Resolution.exec('hostname | cut -d"-" -f2')
   end
end
=======
